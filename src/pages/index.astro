---
import { Image } from '@astrojs/image/components'
import { Icon } from 'astro-icon'
import { SEO } from 'astro-seo'
import Layout from '@layouts/Layout.astro'

let pokemonList = []

let pokemonNumber = 15

try {
	const pokeName = async id => {
		const res = await fetch(`https://pokeapi.co/api/v2/pokemon/${id}`)
		const data = await res.json()
		return data
	}

	for (let index = 1; index <= pokemonNumber; index++) {
		let data = await pokeName(index)
		pokemonList.push(data)
	}
} catch (error) {
	console.log(error)
}
---

<SEO
	title="Astro Pokedex"
	description="Pokedex build with Astro.js, Tailwind and the PokeApi"
/>
<Layout>
	<main class="xl:container xl:mx-auto p-4">
		<h1
			class="text-center text-6xl font-semibold tracking-wide capitalize py-4 bg-clip-text text-transparent bg-gradient-to-br from-slate-100 to-slate-800">
			Astro - PokeApi Example
		</h1>
		<section
			class="flex flex-wrap justify-center items-center md:grow -mx-1 gap-4 md:gap-2 lg:gap-4">
			{
				pokemonList.map(pokemon => (
					<a
						href={pokemon.name}
						rel="prefetch"
						class={`relative h-fit w-full overflow-hidden md:w-1/3 md:grow lg:grow-0 xl:w-1/4 rounded-lg p-4 ${pokemon.types[0].type.name} cursor-pointer transition ease-in-out delay-150 hover:-translate-y-1 hover:scale-110 hover:z-10 duration-300 hide`}>
						<div>
							<div class="flex justify-between text-xl capitalize font-bold">
								<Icon
									name="ic:twotone-catching-pokemon"
									class="absolute -top-3 -right-3 h-56 w-56 opacity-25"
								/>
								<span>{pokemon.name}</span>
								<span class="z-10"># {pokemon.id}</span>
							</div>
							<div class="flex justify-center">
								<Image
									class="translate-y-10"
									src={pokemon.sprites.other.dream_world.front_default}
									alt={pokemon.name}
									height={175}
									width={175}
									fit="fill"
									loading="lazy"
								/>
							</div>
						</div>
						<div class="bg-white rounded-lg h-fit py-12">
							<div class="flex justify-evenly items-center">
								{pokemon.types.map(type => (
									<span
										class={`rounded-full border-solid p-2 font-bold capitalize w-1/3 text-center ${pokemon.types[0].type.name}`}>
										{type.type.name}
									</span>
								))}
							</div>
							<h4 class="text-center text-2xl font-semibold tracking-wide capitalize py-2">
								Base Stats
							</h4>
							{pokemon.stats.map(stat => (
								<div class="flex w-full items-center md:text-xs px-2 uppercase font-bold">
									<span class="w-2/3">{stat.stat.name}</span>
									<span class="w-1/3">{stat.base_stat}%</span>
									<progress
										class="w-2/3 appearance-none border-none rounded-full"
										max="100"
										value={stat.base_stat}
										data-label={`${stat.base_stat}%`}>
										{' '}
										{stat.base_stat}%{' '}
									</progress>
								</div>
							))}
						</div>
					</a>
				))
			}
		</section>
	</main>
</Layout>

<style>
	.hide {
		opacity: 0;
		filter: blur(5px);
		transform: translateX(-100%);
		transition: all 1s;
	}

	.show {
		opacity: 1;
		filter: blur(0);
		transform: translate(0);
	}
</style>

<script defer>
	const observer = new IntersectionObserver(entries => {
		entries.forEach(entry => {
			console.log(entry)
			if (entry.isIntersecting) {
				entry.target.classList.add('show')
			} else {
				entr.target.classList.remove('show')
			}
		})
	})
	const hiddenElements = document.querySelectorAll('.hide')

	hiddenElements.forEach(el => observer.observe(el))
</script>
